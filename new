// src/pages/Callback.tsx
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAppDispatch } from '../hooks/useReduxHooks';
import { setAuthenticationUser } from '../store/authSlice';
import { auth } from './env';
import { useAuth } from '../context/AuthContext';

// Constants for sessionStorage keys
const CODE_VERIFIER_KEY = 'sg-connect-code-verifier';
const STATE_KEY = 'sg-connect-state';

// Function to decode a JWT token
const decodeJwtToken = (token: string) => {
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
      atob(base64)
        .split('')
        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
        .join('')
    );
    return JSON.parse(jsonPayload);
  } catch (e) {
    console.error('Error decoding JWT token:', e);
    return null;
  }
};

// Function to create user in the backend system
async function createUserInBackend(token: string, userInfo: any): Promise<void> {
  try {
    console.log('Attempting to create/verify user in backend...');

    const apiUrl = `${process.env.REACT_APP_API_URL || 'http://localhost:8082'}/api/users`;

    // Create the request payload according to backend requirements
    const createUserRequest = {
      email: userInfo.mail || userInfo.email || '',
      name: userInfo.name,
      role: 'USER' // Default role for new users
    };



    const createUserRequest = {
      igg: userInfo.sgigg || userInfo.sub || '', // IGG (privilÃ©gier sgigg puis sub)
      mail: userInfo.mail || userInfo.email || '',
      firstName: userInfo.givenname || '',
      lastName: userInfo.sn || '',
      country: userInfo.c || '',
      job: userInfo.sgiob || '',
      serviceName: userInfo.sgservicename || '',
      role: 'USER'
    };

    console.log('User creation request:', createUserRequest);

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(createUserRequest)
    });

    if (response.ok) {
      console.log('User created successfully in backend');
      return;
    }

    // Handle 'user already exists' as a non-error case
    const errorText = await response.text();
    if (errorText.includes('User already exists')) {
      console.log('User already exists in backend, proceeding with login');
      return;
    }

    console.warn('Backend user creation failed:', response.status, errorText);
  } catch (error) {
    // Log but don't block authentication flow on backend errors
    console.error('Error creating user in backend:', error);
  }
}

export const Callback: React.FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { setIsAuthenticated, setUser } = useAuth();

  // Add a ref to track if the token request has been made
  const tokenRequestMade = React.useRef(false);

  const authorizationHeader: string = 'Basic ' + window.btoa(`${auth.ENV_CLIENT_ID}:${auth.ENV_CLIENT_SECRET}`);

  useEffect(() => {
    // Only make the token request if it hasn't been made yet
    if (!tokenRequestMade.current) {
      tokenRequestMade.current = true;
      getAccessToken();
    }
  }, []);

  async function getAccessToken(): Promise<void> {
    const urlParams = new URLSearchParams(window.location.search);
    const code: string | null = urlParams.get('code');
    const sessionState: string | null = urlParams.get('session_state');
    const state: string | null = urlParams.get('state');

    // Retrieve code_verifier from sessionStorage
    const codeVerifier = sessionStorage.getItem(CODE_VERIFIER_KEY);
    const storedState = sessionStorage.getItem(STATE_KEY);

    if (!code) {
      console.error('No authorization code found in URL');
      navigate('/login');
      return;
    }

    // Verify state to prevent CSRF attacks
    if (state && storedState && state !== storedState) {
      console.error('State mismatch - possible CSRF attack');
      alert('Security error: Authentication state mismatch. Please try again.');
      navigate('/login');
      return;
    }

    if (!codeVerifier) {
      console.error('No code_verifier found in sessionStorage');
      alert('Authentication error: Missing security code. Please try again.');
      navigate('/login');
      return;
    }

    console.log('Authorization code received:', code);
    if (sessionState) {
      console.log('Session state received:', sessionState);
    }

    try {
      // Log timestamp and request details for debugging
      const requestTime = new Date().toISOString();
      console.log(`[${requestTime}] Starting token request`);
      console.log('Sending token request to:', auth.ENV_TOKENEND_POINT);
      console.log('With redirect_uri:', auth.ENV_REDIRECT_URI);

      // Mask sensitive data for logging
      const maskedCode = code ? `${code.substring(0, 4)}...${code.substring(code.length - 4)}` : 'null';
      const maskedVerifier = codeVerifier ?
        `${codeVerifier.substring(0, 4)}...${codeVerifier.substring(codeVerifier.length - 4)}` : 'null';
      console.log(`Code: ${maskedCode}, Code Verifier: ${maskedVerifier}, Length: ${codeVerifier?.length || 0}`);

      const tokenParams = new URLSearchParams({
        redirect_uri: auth.ENV_REDIRECT_URI,
        grant_type: 'authorization_code',
        code: code,
        code_verifier: codeVerifier
      });

      // Add session_state if present
      if (sessionState) {
        tokenParams.append('session_state', sessionState);
        console.log('Including session_state in request');
      }

      // Create an AbortController to implement a timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout

      let response: Response;
      try {
        response = await fetch(auth.ENV_TOKENEND_POINT, {
          method: 'POST',
          body: tokenParams,
          headers: new Headers({
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': authorizationHeader,
          }),
          redirect: 'follow',
          signal: controller.signal
        });

        // Clear the timeout since the request completed
        clearTimeout(timeoutId);
      } catch (fetchError) {
        // Handle timeout or network errors
        clearTimeout(timeoutId);
        console.error('Fetch error:', fetchError instanceof Error ? fetchError.message : 'Unknown error');
        alert('Network error or timeout. Please check your connection and try again.');
        navigate('/login');
        return;
      }

      if (!response.ok) {
        let errorText = '';
        let errorJson = null;

        try {
          errorText = await response.text();
          console.error(`Token endpoint returned error: ${response.status} ${response.statusText}`, errorText);

          // Try to parse the error as JSON
          try {
            errorJson = JSON.parse(errorText);
          } catch {
            console.log('Error response is not valid JSON');
          }

          // Check for specific error types
          if (errorJson && errorJson.error === 'invalid_grant') {
            console.error('Invalid grant error detected');

            if (errorJson.error_description && errorJson.error_description.includes('Inactive authorization code')) {
              console.error('Inactive authorization code error detected');

              // Clear any stored auth data to ensure a fresh start
              sessionStorage.removeItem(CODE_VERIFIER_KEY);
              sessionStorage.removeItem(STATE_KEY);

              alert('Your authentication session has expired. Please try logging in again.');
              navigate('/login');
              return;
            }
          }
        } catch {
          console.error(`Token endpoint returned error: ${response.status} ${response.statusText}`, 'Could not read error response');
        }

        // Generic error message if no specific error was identified
        alert(`Authentication failed. Please try again. (Error: ${response.status})`);
        navigate('/login');
        return;
      }

      interface TokenResponse {
        access_token: string;
        id_token?: string;
        refresh_token?: string;
        token_type: string;
        expires_in: number;
      }

      let res: TokenResponse;
      try {
        res = await response.json();
        const responseTime = new Date().toISOString();
        console.log(`[${responseTime}] Token response received successfully`);

        // Log token details (safely)
        if (res.access_token) {
          console.log(`Access token received (length: ${res.access_token.length})`);
          if (res.expires_in) {
            console.log(`Token expires in: ${res.expires_in} seconds`);
          }
          if (res.refresh_token) {
            console.log(`Refresh token received (length: ${res.refresh_token.length})`);
          }
        } else {
          console.warn('No access token in response');
        }
      } catch (jsonError) {
        console.error('Error parsing token response as JSON:', jsonError);
        alert('Authentication failed. Invalid response from server.');
        navigate('/login');
        return;
      }

      // Check for either id_token or access_token
      const id_token = res.id_token;
      const access_token = res.access_token;

      if ((!id_token || typeof id_token !== 'string') && (!access_token || typeof access_token !== 'string')) {
        console.error('Invalid or missing tokens in response:', res);
        alert('Authentication failed. Invalid token received.');
        navigate('/login');
        return;
      }

      // Use id_token if available, otherwise use access_token
      const tokenToUse = id_token || access_token;

      // Decode the JWT token using our simple function
      const decoded = decodeJwtToken(tokenToUse);
      if (!decoded) {
        console.error('Error decoding JWT token');
        alert('Authentication failed. Invalid token format.');
        navigate('/login');
        return;
      }

      console.log('Decoded Token Payload:', decoded);

      // Extract user information as shown in the example
      const userInfo = {
        sub: decoded.sub || '',
        mail: decoded.mail || '',
        email: decoded.mail || decoded.email || '', // Alias for mail
        givenname: decoded.givenname || '',
        sn: decoded.sn || '',
        name: `${decoded.givenname || ''} ${decoded.sn || ''}`.trim() || decoded.name || '',
        sgjob: decoded.sgjob || '',
        c: decoded.c || '',
        sgservicename: decoded.sgservicename || '',
        sgigg: decoded.sgigg || ''
      };

      // Important: Mettre Ã  jour le contexte Auth AVANT de naviguer
      // Cela permet de s'assurer que l'Ã©tat d'authentification est mis Ã  jour
      // avant toute tentative de redirection
      setUser(userInfo);
      setIsAuthenticated(true);

      // Store token in localStorage for future use
      localStorage.setItem('access_token', tokenToUse);
      if (res.refresh_token) {
        localStorage.setItem('refresh_token', res.refresh_token);
      }

      // Clean up sessionStorage for security
      sessionStorage.removeItem(CODE_VERIFIER_KEY);
      sessionStorage.removeItem(STATE_KEY);

      // Store user info in localStorage
      localStorage.setItem('user_info', JSON.stringify(userInfo));

      // Dispatch user info to Redux store
      dispatch(
        setAuthenticationUser({
          userName: userInfo.name || userInfo.sub || 'User',
          isAuthenticated: true,
          mail: userInfo.mail || userInfo.email || '',
          token: tokenToUse,
        })
      );

      // Try to create user in backend
      try {
        await createUserInBackend(tokenToUse, userInfo);
      } catch (userCreationError) {
        // Log but don't interrupt the auth flow if user creation fails
        console.error('Error during user creation, continuing with login:', userCreationError);
      }

      // Redirect to home page
      navigate('/home');
    } catch (error) {
      console.log('Error in fetching token', error);
    }
  }

  return <div className="auth-callback-loading">Authentification en cours...</div>;
}