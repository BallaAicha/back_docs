import { apiClient } from '../config/apiClient';

interface CreateTeamSpaceDto {
  name: string;
  description: string;
}

interface TeamSpaceResponse {
  id: string;
  name: string;
  description: string;
  // ajoutez d'autres champs selon votre API
}

export const teamSpaceService = {
  createTeamSpace: async (data: CreateTeamSpaceDto): Promise<TeamSpaceResponse> => {
    const token = localStorage.getItem('access_token');
    const response = await apiClient.post('/api/team-spaces', data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
  },
};



---------------

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { teamSpaceService } from '../services/teamSpaceService';

interface UseTeamSpaceReturn {
  loading: boolean;
  error: string | null;
  createTeamSpace: (name: string, description: string) => Promise<void>;
}

export const useTeamSpace = (): UseTeamSpaceReturn => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const createTeamSpace = async (name: string, description: string) => {
    try {
      setLoading(true);
      setError(null);
      const response = await teamSpaceService.createTeamSpace({ name, description });
      navigate(`/team-spaces/${response.id}/add-members`);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Une erreur est survenue');
    } finally {
      setLoading(false);
    }
  };

  return { loading, error, createTeamSpace };
};



------------



// ... autres imports
import { useTeamSpace } from '../hooks/useTeamSpace';

export const CreateTeamSpace = () => {
  const navigate = useNavigate();
  const { loading, error, createTeamSpace } = useTeamSpace();
  const [formData, setFormData] = useState({
    name: '',
    description: ''
  });

  // ... handleChange reste le même

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await createTeamSpace(formData.name, formData.description);
  };

  return (
    // ... le reste du JSX reste le même, mais vous pouvez ajouter :
    {error && (
      <div className="text-red-600 mb-4">
        {error}
      </div>
    )}
    {loading && (
      <div className="text-primary-600">
        Chargement...
      </div>
    )}
    // ...
  );
};