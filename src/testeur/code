public interface GetLatestDocumentVersions extends Query {
    List<DocumentVersionDTO> handle(GetLatestDocumentVersionsRequest input, RequestContext context);
}



@Service
@RequiredArgsConstructor
public class GetLatestDocumentVersionsImpl implements GetLatestDocumentVersions {

    private final DocumentRepository documentRepository;

    @Override
    public List<DocumentVersionDTO> handle(GetLatestDocumentVersionsRequest input, RequestContext context) {
        List<DocumentEntity> allDocuments = documentRepository.findAll();

        List<DocumentVersionDTO> latestVersions = allDocuments.stream()
            .map(doc -> documentRepository.findTopByParentDocumentIdOrderByUpdatedAtDesc(doc.getId())
                .orElse(doc))
            .map(DocumentVersionDTO::fromEntity)
            .collect(Collectors.toList());

        return latestVersions;
    }
}



@Getter
@Setter
public class GetLatestDocumentVersionsRequest {
    // Possible fields if you have filter criteria
}




public interface DocumentRepository extends JpaRepository<DocumentEntity, Long> {
    Optional<DocumentEntity> findTopByParentDocumentIdOrderByUpdatedAtDesc(Long parentId);
}



public interface DocumentAPI extends
    GetDocumentsByFolder,
    GetDocumentVersions,
    GetLatestDocumentVersions // ⬅️ Ajout ici
{
    @Operation(
        summary = "Récupérer la dernière version de chaque document",
        parameters = {@Parameter(ref = "entityIdHeader", required = true)}
    )
    @GetMapping("/documents/latest-versions")
    @GraphQLQuery(name = "latestDocumentVersions")
    @Override
    List<DocumentVersionDTO> handle(GetLatestDocumentVersionsRequest input,
                                    @GraphQLRootContext @ModelAttribute RequestContext ctx);
}



@Service
@RequiredArgsConstructor
public class GetLatestDocumentVersionsImpl implements GetLatestDocumentVersions {

    private final DocumentRepository documentRepository;

    @Override
    public List<DocumentVersionDTO> handle(GetLatestDocumentVersionsRequest input, RequestContext context) {
        // Récupérer toutes les versions existantes de documents sous forme de DTO
        List<DocumentVersionDTO> allDocuments = documentRepository.findAll();

        // Grouper par parentId s'il existe, sinon grouper par document id lui-même
        Map<Long, Optional<DocumentVersionDTO>> latestByParentId = allDocuments.stream()
            .collect(Collectors.groupingBy(
                dto -> dto.getParentDocumentId() != null ? dto.getParentDocumentId() : dto.getId(),
                Collectors.maxBy(Comparator.comparing(DocumentVersionDTO::getUpdatedAt))
            ));

        // Transformers la map en liste des dernières versions
        return latestByParentId.values().stream()
            .filter(Optional::isPresent)
            .map(Optional::get)
            .collect(Collectors.toList());
    }
}